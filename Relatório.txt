Relatório Seção 1:
	A Seção 1 fala sobre as vantagens do Flutter, sua capacidade de utilizar o mesmo codigo tanto para Android como para IOS. É uma ferramenta open source, o que pode diminuir o tempo de desenvolvimento, graças a essa vantagem.
	Após isso, explica de forma bem consisa como Widgets funcionam e sobre como o Flutter tem um desenvolvimento orientado em design, além de mostrar dados que dão motivos para estuda-lo
	Como é uma seção introdutória, ainda não foi ensinado nada pratico, apenas motivos para estudar o Flutter.

Relatório Seção 2:
	A seção 2 é um modúlo que te ensina a instalar tudo o que for necessário para que possamos desenvolver com Flutter. 
VS Code, Android Studio e até mesmo o próprio Flutter.

Relatório Seção 3:
	O começo da Seção é a criação de um projeto Flutter a partir do Android Studio, explicando como a emulação funciona e criando um emulador além de explicar como utilizar seu próprio celular para testar os aplicativos Flutter, a partir da depuração USB do celular o que testei no meu dispositivo e funcionou corretamente Após isso, o professor diz que iremos começar a estudar sobre Dart, antes de começar a estudar Flutter.

Relatório Seção 4:
	Nesta seção, é explicado o básico de dart, indo de variáveis até loops com for. No momento o professor está dando um mini curso de lógica de programação em dart para que os alunos tenham um nivelamento de programção, para que assim consigam entender o Flutter.
	Além disso, ele recomenda a utilização do DartPad, já que ele consegue te enviar para a documentação de forma mais fácil.

Relatório Seção 5:
	O assunto principal desta seção é as funções, como elas criam uma maior praticidade para o desenvolvimento, já que diminuiria a quantidade de repetição no código, pois elas conseguem referir algum conjunto de comandos e ser reutilizada em outras linhas durante o desenvolvimento, além de explicar sobre parâmentros, para complementar o conteúdo inicial de função. É uma seção que considero complementar à seção 4, já que aprofunda os contéudos de Dart básico e lógica da programação.
	Após isso o professor explica sobre a nulidade da variáveis em Dart e suas aplicações, além de como converter uma variável nullable para uma non-nullable. Ao final da Seção, ele fala brevemente sobre escopo.

Relatório Seção 6:
	O assunto desta seção é principalmente sobre coleções, mais especificamente listas e maps. O professor explica sobre as listas e como é a sytex dela, após isso ele explica sobre maps e suas características, e suas diferenças com as listas.
	Depois dessa explicação básica sobre listas e mapas. o professor começa a explicar algumas funcionalidades de ambas, além de explicar sobre Null Assertion, para que tirar a nulidade de um valor dentro de uma lista ou mapa e as propriedades do Null-Safety dentro de listas e mapas.
	No final da seção, o professor começa explicar sobre JSON, já que esta notação é analisado pelo dart como um mapa. Um JSON é uma notação que é muito utilizada para estruturar dados em formato de texto. No dart, a conversão de um JSON para um mapa é feito a partir da importação de uma biblioteca chamada "dart.convert". Com a utilização do JSON, podemos fazer requisições em bancos de dados, tranferir dados entre aplicações a partir de um API, etc.

Relatório Seção 7:
	Esta seção tem um foco em mostrar outros recursos da linguagem dart, que podem ser úteis na utilização do flutter, o primeiro recurso falado nesse tópico é sobre Exceptions e Try/Catch que é utilizado para conseguir lidar com exceções sem que haja um problema maior no código, conseguindo assim criar contra medidas para determinadas exceções, deixando a aplicação amis segura a erros.
	O próximo tópico seria como criar uma exceção personalizada, para criar exceções especificas da aplicação. 
	 O terceiro tópico desse modúlo são os Enumeradores, que juntamente com o switch pode facilitar sua busca em grandes quantidades de dados, essa funcionalidade associa um valor inteiro para cada tipo de elemento. 
	O quarto tópico é a diferença entre const e final.
Const é uma variavel congelada em tempo de compilação, desta forma, logo em sua atribuição, a linguagem dart já coloca o valor atribuído em qualquer lugar com a constante, graças a isso, qualquer mudança em uma constante causa um erro de compilação. Enquanto isso o final é para valores que são atribuidos durante a execução do codigo, mas que também não podem ser alterados, também causando erros caso o valor da variavel final seja trocado.
	o último fala sobre o operador de cascata, que dá a possibilidade de adicionar diversos métodos em sequência.

Relatório Seção 8:
	Essa seção é uma introdução a orientação a objetos, explicando o que é uma classe, um atributo, um método, objeto, entre outros conceitos básicos de P.O.O.
Após isso, o professor explica sobre contrutores, como ele é utilizado para deixar mais simples a atribuição dos atributos de determinado objeto. Com isso em mente, o professor começa a explicar sobre getters e setter, como eles podem ser utilizados para inferir um atributo privado e criar blocos de codigos dentro desse processo.
	Após essas explicações o professor explica sobre duas propriedades dos atributos chamadas static e late, que funcionam da seguinte maneira:
Static: um atributo static se referencia a propria classe e não ao objeto, dessa forma chamamos a propria classe para podermos utilizar esse atributo ou método.
Late: é um tipo de atributo em que antes de que ela seja lida, é necessaria que em algum momento ela seja iniciada, mas não necessariamente na compilação inicial. 

Relatório Seção 9:
	Essa seção se trata de herança e polimorfismo. Primeiramente o professor explica a utilidade de uma herança, com ela podendo diminuir a quantidade de codigo repetido caso varias classes podessem extender de uma, além disso ele fala sobre como a classe base consegue extender todas as classes derivadas dentro de listas ou funções, o que é útil para quando não temos certeza de qual classe derivada estamos falando. Além disso, o professor explica como rescrever metódos em classes derivadas.
	Depois dessa explicação, o instrutor fala sobre a keyword super, que basicamente pega o valor do método ou atributo da classe base, ignorando sua reescrição na classe derivada. O que pode ser útil para quando queremos apenas adicionar algum bloco de codigo a mais ao que já vem feito na classe base. 
	Depois disso, o professor explica sobre classes abstratas, que não podem ser instânciadas, apenas extendidas para classes derivadas, que podem ser abstratas ou não. 

Relatório Seção 10:
	Essa seção começa o curso de Flutter, com um aplicativo de contar pessoas em um estabelecimento, o projeto está nesse mesmo repositório, na pasta conta_pessoas. Terminei de fazer as funcionalidades propostas no curso, que seriam basicamente criar um contador que trava quando chega em 20, já que seria o valor maximo de pessoas que poderiam estar dentro do estabelecimento.

Relatório Seção 11:
	Essa seção é complementar a seção 10, e tem foco em o que fazer quando seu aplicativo está pronto. Esse tópico ensina a assinar um aplicativo, como mudar a foto do aplicativo, seu nome e tipos de compilação.

Relatório Seção 12:
	Essa seção se baseia na criação de um segundo projeto, que estará alocado nesse mesmo repositório, na pasta lista_fazer. O projeto é a criação de uma lista de tarefas. Durante a exposição do aplicativo completo, percebi que iria aprender novas funcionalidades que ainda não tinha estudado anteriormente, que seriam:
	1. Criação de um aplicativo que funcione tanto mobile como web, e que o sistema consiga indentificar em que local estou rodando esse aplicativo, fazendo alterações dependendo da plataforma.
	2. Criação de uma list view. Mesmo que conheça o conceito pelos meus conhecimentos em C#, nunca fiz uma em Flutter, o que com certeza vai ser útil tanto para esse projeto, como para os próximos.
	3. Animações para Flutter web, com base no mouse. Seria meu primeiro passo para entender a criar animações em Flutter.	
	
	Após o começo da criação do projeto, aprendi também sobre o widget Extended, que resolveu um problema que estava tendo na criação de uma row com um TextField. 


